 /*******************************************************************\
|
|  Assign4.Java by Nicholas Fullerton/Philip Powell/Natalie Calkins
|  Built tough on 9/25/2015 for CST 338
|  as the Week 4 programming assignment
|
\ ******************************************************************/

import java.util.*;

public class Assign4 {
 
 
	public static void main(String[] args)
	{
		  String[] sImageIn =
		  {
			 "                                               ",
			 "                                               ",
			 "                                               ",
			 "     * * * * * * * * * * * * * * * * * * * * * ",
			 "     *                                       * ",
			 "     ****** **** ****** ******* ** *** *****   ",
			 "     *     *    ****************************** ",
			 "     * **    * *        **  *    * * *   *     ",
			 "     *   *    *  *****    *   * *   *  **  *** ",
			 "     *  **     * *** **   **  *    **  ***  *  ",
			 "     ***  * **   **  *   ****    *  *  ** * ** ",
			 "     *****  ***  *  * *   ** ** **  *   * *    ",
			 "     ***************************************** ",  
			 "                                               ",
			 "                                               ",
			 "                                               "

		  };      
				
			 
		  
		  String[] sImageIn_2 =
		  {
				"                                          ",
				"                                          ",
				"* * * * * * * * * * * * * * * * * * *     ",
				"*                                    *    ",
				"**** *** **   ***** ****   *********      ",
				"* ************ ************ **********    ",
				"** *      *    *  * * *         * *       ",
				"***   *  *           * **    *      **    ",
				"* ** * *  *   * * * **  *   ***   ***     ",
				"* *           **    *****  *   **   **    ",
				"****  *  * *  * **  ** *   ** *  * *      ",
				"**************************************    ",
				"                                          ",
				"                                          ",
				"                                          ",
				"                                          "

		  };
		 
		  BarcodeImage bc = new BarcodeImage(sImageIn);
		  DataMatrix dm = new DataMatrix(bc);
		 
		  // First secret message
		  dm.translateImageToText();
		  dm.displayTextToConsole();
		  dm.displayImageToConsole();
		  
		  // second secret message
		  bc = new BarcodeImage(sImageIn_2);
		  dm.scan(bc);
		  dm.translateImageToText();
		  dm.displayTextToConsole();
		  dm.displayImageToConsole();
		  
		  // create your own message
		  dm.readText("What a great resume builder this is!");
		  dm.generateImageFromText();
		  dm.displayTextToConsole();
		  dm.displayImageToConsole();
	   }  
   
    // This is the interface which represents the transfer
	// and manipulation of a BarcodeImage(via Datamatrix):
	interface BarcodeIO {
		
		public boolean scan(BarcodeImage bc);
		public boolean readText(String text);
		public boolean generateImageFromText();
		public boolean translateImageToText();
		public void displayTextToConsole();
		public void displayImageToConsole();

}
	
class BarcodeImage implements Cloneable {
	    
	    
	    public static final int MAX_WIDTH = 65;
	    public static final int MAX_HEIGHT = 30;
	    
	    // 2-D Array to hold "pixel" data:
	    private boolean[][] image_data;
	    
	    // This instantiates the image array to max dimensions
	    // with every element false:
	    public BarcodeImage() {
	        image_data = new boolean[MAX_WIDTH][MAX_HEIGHT];
	        for(int i = 0; i < MAX_WIDTH; i++) {
	            for(int j = 0; j < MAX_HEIGHT; j++)
	                image_data[i][j] = false;
	        }
	    }
	    
	    /* Takes a 1D array of Strings and converts it to the internal 
	     * 2D array of booleans. This constructor is a little tricky because 
	     * the incoming image is not the necessarily same size as the internal 
	     * matrix.  So, you have to pack it into the lower-left corner, causing 
	     * a bit of stress if you don't like 2D counting. This is good 2D array exercise:
	     */
	    public BarcodeImage(String[] str_data) {
	        
	        // If data is larger than max dimensions, allocate max size
	        // and fill elements with "false" values:
	        if(str_data.length > MAX_WIDTH * MAX_HEIGHT) {
	            image_data = new boolean[MAX_WIDTH][MAX_HEIGHT];
	            for(int i = 0; i < MAX_WIDTH; i++) {
	                for(int j = 0; j < MAX_HEIGHT; j++)
	                    image_data[i][j] = false;
	            }
	        }
	        else {
	            // FIXME -- we'll see how this goes. 
	            ArrayList<Character> list = new ArrayList<Character>();
	            int rows = str_data[0].length(); int cols = str_data.length;
	            char[][] char2D = new char[rows][cols];           
	            image_data = new boolean[rows][cols];
	            
	            // This helps convert the 1-D array to a 2-D array:
	            for (int i = 0; i < str_data.length; i++) {
	                char2D[i] = str_data[i].toCharArray();
	            }
	                        
	            // FIXME - remove print statements after debugging
	            for (char[] char1D : char2D) {
	                for (char c : char1D)
	                    list.add(Character.valueOf(c));                
	            }
	            
	            for(Character c : list) {
	                
	            }
	         
	        
	         // FIXME - remove print statements after debugging
	            for(int i = 0; i < rows; i++) {
	                for(int j = 0; j < cols; j++) {
	                    if(image_data[i][j] = true)
	                        System.out.print("*");
	                    else
	                        System.out.print(" ");
	                }
	                System.out.println();
	            }
	       
	        
	        
	        
	        
	        
	        }
	    }


// Copy Constructor for clone():
public BarcodeImage(BarcodeImage barcode) {
    image_data = barcode.getImageData();
}

// Override of clone():
public BarcodeImage clone() {        
    try {
        return (BarcodeImage)super.clone();
        
    } 
    catch (CloneNotSupportedException ex) {
        return null;
        
    }
}

// Helper accessor for copy/clone():
public boolean[][] getImageData() { return image_data; }   

// Mutator for pixel in image array:    
public boolean getPixel(int row, int col) {
    // Return value is used as both data and error condition
    // so program fails gracefully rather than crashing:
    try {
        return image_data[row][col];                 
    }
    catch(Exception ex) {
        System.out.println("BarcodeImage.getPixel() FAILED - Exception caught!");
        return false;
    }
}

// Accessor for pixel in image array:
public boolean setPixel(int row, int col, boolean value) {
    try {
        image_data[row][col] = value;            
    }
    catch(Exception ex) {
        System.out.println("BarcodeImage.setPixel() FAILED - Exception caught!");
        return false;
    }
    return true;
}

/* OPTIONAL TODO:
 * A private utility method is highly recommended, but not required:  
 * checkSize(String[] data)  It does the job of checking the incoming 
 * data for every conceivable size or null error.  Smaller is okay.  
 * Bigger or null is not. A displayToConsole() method that is useful 
 * for debugging this class, but not very useful for the assignment at large.
 */

}


public class DataMatrix implements BarcodeIO

{
public static final char BLACK_CHAR = '*';
public static final char WHITE_CHAR = ' ';
private BarcodeImage image;
private String text;
private int actualWidth;
private int actualHeight;


public DataMatrix()
{
  image = new BarcodeImage();
  text = "";
  actualWidth = 0;
  actualHeight = 0;
}


public DataMatrix(BarcodeImage image)
{
  if(!scan(image))
   image = new BarcodeImage();
  else
  {
   actualWidth = 0;
   actualHeight = 0;
  }

  text = "";
}


public DataMatrix(String text)
{
  image = new BarcodeImage();
  
  if(!readText(text))
   text = "";
  
  actualWidth = 0;
  actualHeight = 0;  
}


public boolean readText(String text)
{
  if(text == null)
   return false;

  this.text = text;
  return true;
}


public boolean scan(BarcodeImage image)
{
  try
  {
   this.image = (BarcodeImage) image.clone();
   actualWidth = computeSignalWidth();
   actualHeight = computeSignalHeight();
   return true;   
  }
  catch(CloneNotSupportedException ex)
  {
  }
  
  return false;
}


public int actualWidth()
{
  return actualWidth;
}


public int actualHeight()
{
  return actualHeight;
}

private int computeSignalWidth()
{
  int i = 1;

  while(image.getPixel(BarcodeImage.MAX_HEIGHT - i, 0)
    && (i != BarcodeImage.MAX_HEIGHT))
   i++;

  return i - 1;
}


private int computeSignalHeight()
{
  int i = 0;

  while(image.getPixel(29, i) && (i != BarcodeImage.MAX_WIDTH - 1))
   i++;

  return i - 1;
}

public boolean generateImageFromText()
{
  if(text == null)
   return false;

  image = new BarcodeImage();

  for(int i = 0; i < text.length(); i++)
  {
   image.setPixel(BarcodeImage.MAX_HEIGHT - 1, i, true);
  }

  pritChar(0, 255);

  for(int i = 1; i < text.length() + 1; i++)
  {
   if(!pritChar(i, (int) text.charAt(i)))
    return false;
  }

  actualWidth = computeSignalWidth();
  actualHeight = computeSignalHeight();

  return true;
}

public boolean translateImageToText()
{
  String txt = "";
  int ch;

  if(image == null)
   return false;

  for(int i = 0; i < text.length(); i++)
  {
   ch = 0;
   for(int j = BarcodeImage.MAX_HEIGHT - 2; j > BarcodeImage.MAX_HEIGHT - 10; j--)
   {
    if(image.getPixel(j, i))
     ch += Math.pow(2, j - BarcodeImage.MAX_HEIGHT - 2);
   }
   txt += (char) ch;
  }

  text = txt;

  actualWidth = computeSignalWidth();
  actualHeight = computeSignalHeight();
  return true;
}

public void displayTextToConsole()
{
  System.out.println(text);
}


public void displayImageToConsole()
{
  for(int i = 0; i < text.length() + 1; i++)
  {
   for(int j = BarcodeImage.MAX_HEIGHT - actualHeight - 10; j < BarcodeImage.MAX_HEIGHT; j--)
    if(image.getPixel(i, j))
     System.out.print(BLACK_CHAR);
    else
     System.out.println(WHITE_CHAR);
   System.out.println();
  }
}


private boolean pritChar(int col, int code)
{
  String str1 = Integer.toBinaryString(code);
  Boolean[] bool = new Boolean[8];
  int pos = 0;

  if(code < 0 || code > 255)
   return false;

  for(int i = 0; i < 8; i++)
   if(str1.charAt(7 - i) == '1')
    bool[i] = true;
   else
    bool[i] = false;

  for(int i = BarcodeImage.MAX_HEIGHT - 2; i < str1.length(); i++, pos++)
   image.setPixel(i, col, bool[pos]);

  return false;

}
}
}
